"""
Script: evaluation_sheet_reader.py
Description: Reads human evaluation data from a directory of Excel (.xlsx, .xls) files
             into a single pandas DataFrame for analysis.

This script is designed to work with evaluation sheets generated by
'evaluation_sheet_generator.py'.
"""

import pandas as pd
import os
import re
import numpy as np


def main():
    # Get the directory of this script
    current_script_dir = os.path.dirname(os.path.abspath(__file__))
    print(current_script_dir)

    # IMPORTANT: Replace 'path/to/your/evaluation_sheets' with the actual path
    # where your generated human evaluation Excel files are located.
    # evaluation_directory = "path/to/your/evaluation_sheets"
    evaluation_directory = os.path.abspath(
        os.path.join(current_script_dir, ".", "human_evaluation_sheets")
    )

    evaluation_dataframe = read_human_evaluation_sheets(evaluation_directory)

    if not evaluation_dataframe.empty:
        print("\n--- Combined Evaluation DataFrame ---")
        print("Shape:", evaluation_dataframe.shape)
        print("\nColumns:", evaluation_dataframe.columns.tolist())
        print("\nData Types:")
        print(evaluation_dataframe.dtypes)
        print("\nFirst 5 Rows:")
        print(evaluation_dataframe.head())
        print("\nDescriptive Statistics for Ratings:")
        print(
            evaluation_dataframe[
                ["Adequacy (1-5)", "Fluency (1-5)", "Overall Quality (1-5)"]
            ].describe()
        )
    else:
        print("\nNo evaluation data was loaded.")


def read_human_evaluation_sheets(directory_path: str) -> pd.DataFrame:
    """
    Reads all human evaluation Excel (.xlsx, .xls) files from a specified directory
    into a single pandas DataFrame.

    Assumes evaluation sheets have a consistent structure with columns:
    "Image Filename", "Ground Truth Caption", "Generated Caption (Model)",
    "Adequacy (1-5)", "Fluency (1-5)", "Overall Quality (1-5)", "Comments".

    Args:
        directory_path (str): The path to the directory containing the Excel files.

    Returns:
        pd.DataFrame: A DataFrame containing the combined evaluation data from all
                      Excel files. Returns an empty DataFrame if no suitable Excel
                      files are found or if the directory does not exist.
    """
    all_dataframes = []
    # Expected Headers
    expected_headers = [
        "Image Filename",
        "Ground Truth Caption",
        "Generated Caption (Model)",
        "Adequacy (1-5)",
        "Fluency (1-5)",
        "Overall Quality (1-5)",
        "Comments",
        "Generation Method",
    ]

    if not os.path.isdir(directory_path):
        print(f"Error: Directory not found at {directory_path}")
        return pd.DataFrame()

    print(f"Scanning directory: {directory_path} for Excel files...")
    for filename in os.listdir(directory_path):
        if filename.endswith((".xlsx", ".xls")):
            filepath = os.path.join(directory_path, filename)
            try:
                # Read the Excel file. Assuming the data starts from the first sheet (0).
                df = pd.read_excel(filepath, sheet_name=0)

                # Validate column names
                if not all(col in df.columns for col in expected_headers):
                    print(f"Warning: File {filename} is missing some expected columns.")
                    missing_cols = [
                        col for col in expected_headers if col not in df.columns
                    ]
                    print(f"  Missing: {missing_cols}")

                # Drop the 'Image' column in Excel (Column A) which contains the images.
                df = df.drop(columns=["Image"])

                # Add a column indicating the source file for traceability
                df["source_file"] = filename

                all_dataframes.append(df)
                print(f"Successfully read: {filename}")

            except Exception as e:
                print(f"Error reading {filename}: {e}")

    if all_dataframes:
        # Concatenate all Dataframes. 'ignore_index=True' resets the index for the new DataFrame.
        combined_df = pd.concat(all_dataframes, ignore_index=True)

        # Convert rating columns to numeric, coercing errors to NaN
        rating_cols = ["Adequacy (1-5)", "Fluency (1-5)", "Overall Quality (1-5)"]
        for col in rating_cols:
            if col in combined_df.columns:
                combined_df[col] = pd.to_numeric(combined_df[col], errors="coerce")

        return combined_df
    else:
        print(f"No suitable Excel files found in {directory_path}")
        return pd.DataFrame()


if __name__ == "__main__":
    main()
